package com.uniskare.eureka_skill.service.impl;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.uniskare.eureka_skill.controller.Response.BaseResponse;
import com.uniskare.eureka_skill.controller.Response.Code;
import com.uniskare.eureka_skill.controller.Response.ResponseMessage;
import com.uniskare.eureka_skill.dto.SkillDTO;
import com.uniskare.eureka_skill.entity.Comment;
import com.uniskare.eureka_skill.entity.Skill;
import com.uniskare.eureka_skill.entity.SkillPic;
import com.uniskare.eureka_skill.entity.StarSkill;
import com.uniskare.eureka_skill.repository.CommentRepo;
import com.uniskare.eureka_skill.repository.SkillPicRepo;
import com.uniskare.eureka_skill.repository.SkillRepo;
import com.uniskare.eureka_skill.repository.StarSkillRepo;
import com.uniskare.eureka_skill.service.SkillService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.util.List;
import java.util.Optional;

import static com.uniskare.eureka_skill.service.Helper.Const.*;

/**
 * @author : Bhy
 * @description ：
 */
@Service
@Transactional
public class SkillServiceImpl implements SkillService {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private SkillRepo skillRepo;
    //技能详情获取评论所需
    @Autowired
    private CommentRepo commentRepo;
    @Autowired
    private SkillPicRepo skillPicRepo;
    @Autowired
    private StarSkillRepo starSkillRepo;

    private int pageSize = 10;
    //save总是返回skill，感觉这里无法判断是不是插入成功，这里一定成功，只能捕捉一下excep，前端可以判断skill格式不对或者网络问题导致的失败
    @Override
    public BaseResponse save(JSONObject skill) {
        try {

            Skill insertSkill;
            String userId = skill.getString(USER_ID);
            String content = skill.getString(CONTENT);
            String title = skill.getString(TITLE);
            String fullType = skill.getString(FULL_TYPE);
            String subType = skill.getString(SUB_TYPE);
            BigDecimal price = skill.getBigDecimal(PRICE);
            String unit = skill.getString(UNIT);
            String cover = skill.getString(COVER);
            JSONArray images = skill.getJSONArray(IMAGES);
            Timestamp date = skill.getTimestamp(DATE);


            int skill_id = skill.getIntValue(SKILL_ID);
            if(skill_id == -1){
                insertSkill = new Skill();
                insertSkill.setUserId(userId);
                insertSkill.setScore(BigDecimal.valueOf(5.0));
            }else{
                insertSkill = skillRepo.findBySkillId(skill_id);
            }
            insertSkill.setUnit(unit);
            insertSkill.setCover(cover);
            insertSkill.setTitle(title);
            insertSkill.setFullType(fullType);
            insertSkill.setPrice(price);
            insertSkill.setSubtype(subType);
            insertSkill.setDate(date);
            insertSkill.setContent(content);


            Skill result = skillRepo.save(insertSkill);
            SkillPic skillPic = new SkillPic();
            skillPic.setSkillId(result.getSkillId());        
            for(int i =0;i < images.size();i++){
                skillPic.setPindex(i);
                skillPic.setUrl(images.getString(0));
                skillPicRepo.save(skillPic);
            }

            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.INSERT_SUCCESS
                    , "/skill/insert"
                    , result);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }

    @Override
    public BaseResponse findAll(int page) {
        try {
            Page<SkillDTO> result =  skillRepo.findAllProjectedBy(PageRequest.of(page, pageSize, Sort.by("date").descending()));
            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.QUERY_SUCCESS
                    , "/skill/all"
                    , result);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }


    @Override
    public BaseResponse deleteById(int skillId) {
        //感觉没必要判断在不在，反正deleteById返回的总是空
//        Optional<Skill> skill = skillService.findById(skillId);
//        if(skill.isPresent()) {
//            skillService.deleteById(skillId);
//        }
        try {
            skillRepo.deleteById(skillId);
            //delete的路径有问题，不过baseResponse到底用哪个？
            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.DELETE_SUCCESS
                    , "/skill/delete"
                    , null);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }

    }

    /**
     *
     * @param skill
     * @flag 1表示有相应技能，0表示没有
     */
    @Override
    public BaseResponse updateSkill(Skill skill) {
        try {
            //这里如果没有找到skillId对应的技能的话需要区分返回吗？
            Optional<Skill> oldSkillOpt = skillRepo.findById(skill.getSkillId());
            //看原来的update只update了这些内容
            boolean flag;
            if(oldSkillOpt.isPresent()) {
                Skill oldSkill = oldSkillOpt.get();
                oldSkill.setTitle(skill.getTitle());
                oldSkill.setContent(skill.getContent());
                oldSkill.setFullType(skill.getFullType());
                oldSkill.setSubtype(skill.getSubtype());
                oldSkill.setSubsubtype(skill.getSubsubtype());
                skillRepo.save(oldSkill);
                flag = true;
            }   else {
                flag = false;
            }
            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.UPDATE_SUCCESS
                    , "/skill/update"
                    , null);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }

    @Override
    public BaseResponse findByFullType(String fullType, int page) {
        try {
            Page<SkillDTO> result = skillRepo.findByFullType(fullType,PageRequest.of(page,pageSize));

            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.QUERY_SUCCESS
                    , "/skill/all"
                    , result);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }

    @Override
    public BaseResponse findByFullTypeAndSubtype(String fullType,String subtype, int page) {
        try {

            Page<SkillDTO> result = skillRepo.findByFullTypeAndSubtype(fullType,subtype,PageRequest.of(page,pageSize));

            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.QUERY_SUCCESS
                    , "/skill/all"
                    , result);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }

    @Override
    public BaseResponse searchSkillByTitle(String title, int page) {
        try {
            Page<SkillDTO> result = skillRepo.findByTitleLike("%"+title+"%",PageRequest.of(page,pageSize));

            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.QUERY_SUCCESS
                    , "/search"
                    , result);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }

    @Override
    public BaseResponse findByUserId(String userId, int page) {
        try {
            Page<SkillDTO> result = skillRepo.findByUserId(userId,PageRequest.of(page,pageSize));

            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.QUERY_SUCCESS
                    , "/search"
                    , result);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }
    }

    //skill详情，返回图片和评论，评论需要连接User表
    //由于是详情，没有任何dto有关操作，全部内容都返回了
    @Override
    public BaseResponse findById(int skillId,String userId) {

        try{
            Optional<Skill> optResult = skillRepo.findById(skillId);
            Skill skill = null;
            if(optResult.isPresent())
                skill = optResult.get();
            List<Comment> comments = commentRepo.findBySkillId(skill.getSkillId());
            List<StarSkill> result = starSkillRepo.findByStarIdAndSkillId(userId,skillId);
            int size = result.size();
            JSONObject jsonObject = new JSONObject();
            jsonObject.fluentPut("SKILL",skill).fluentPut("COMMENTS",comments).fluentPut("IsSTAR",size);
            BaseResponse baseResponse = new BaseResponse((new Timestamp(System.currentTimeMillis())).toString()
                    , Code.OK
                    , Code.NO_ERROR_MESSAGE
                    , ResponseMessage.QUERY_SUCCESS
                    , "/skill"
                    , jsonObject);
            return baseResponse;
        }
        catch (Exception e)
        {
            return new BaseResponse(Code.OK, e.toString(), ResponseMessage.OPERATION_FAIL, null);
        }

    }





}
